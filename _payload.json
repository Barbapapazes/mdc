[{"data":1,"prerenderedAt":-1},["Reactive",2],{"search-api":3},[4],{"id":5,"path":6,"dir":7,"title":8,"description":9,"keywords":10,"body":17},"content:0.index.md","/","","Home","MDC stands for MarkDown Components. This syntax supercharges regular Markdown to write documents interacting deeply with any Vue component",[11,12,13,14,15,16],"Setup","Parsing Markdown","Rendering (Vue)","Configurations","Contributing","License","  Nuxt MDC  MDC stands for MarkDown Components. This syntax supercharges regular Markdown to write documents interacting deeply with any Vue component.  Setup  Add   nuxt-mdc  dependency to your project:       yarn     add     --dev     nuxt-mdc      npm     install     --save-dev     nuxt-mdc      pnpm     i     --save-dev     nuxt-mdc  Then, add   nuxt-mdc  to the modules section of your   nuxt.config.ts      export     default     defineNuxtConfig  ({\n     modules: [  'nuxt-mdc'  ]\n   })  That's it, you can start writing and rendering markdown files ✨  Parsing Markdown  Nuxt MDC exposes a handy helper to parse MDC files. You can import   parseMarkdown  function from   nuxt-mdc/runtime  and use it to parse markdown files written with MDC syntax.  Nodejs      import   { parseMarkdown }   from     'nuxt-mdc/runtime'\n   \n   export     default     eventHandler  (  async   ()   =>   {\n       const     mdc     =   [\n         '# Hello MDC'  ,\n         ''  ,\n         '::alert'  ,\n         'This is an Alert'  ,\n         '::'\n     ].  join  (  '  \\n  '  )\n   \n       const     ast     =     await     parseMarkdown  (mdc)\n   \n       return   ast\n   })  Browser   parseMarkdown  function is universal helper and you can also use it in browser. For example inside a Vue component.      \u003C  template  >\n     \u003C  div  >This is a test\u003C/  div  >\n   \u003C/  template  >\n   \n   \u003C  script     setup     lang  =  \"ts\"  >\n   import   { parseMarkdown }   from     'nuxt-mdc/runtime'\n   \n   const     props     =     defineProps  ({\n     md: {\n       type: String,   0   -\n       default: ()   =>     '::alert  \\n  Missing markdown input  \\n  ::'\n     }\n   })\n   \n   const     ast     =     await     parseMarkdown  (props.md)\n   \u003C/  script  >  Options   parseMarkdown  helper also accepts options as second argumant to control parser's behavior. (Checkout    MDCParseOptions  interface↗︎ ).     Name  Default  Description     remark.plugins   {}  Register / Configure parser's remark plugins.    rehype.options   {}  Configure   remark-rehype  options.    rehype.plugins   {}  Register / Configure parser's rehype plugins.    highlight   false  Contorl whether code blocks should highlight or not. You can alsoo provide custom highlighter.    toc.depth )   2  Maximum heading depth to include in the table of contents.    toc.searchDepth )   2  Maximum depth of nested tags to search for heading.  Checkout    MDCParseOptions  types↗︎ .  Rendering (Vue)   nuxt-mdc  exposes three components to render markdown files.   \u003CMDCRenderer>  This component will take the result of    parseMarkdown  function and render the contents. For example this is a extended version of sample code in   Browser section  which uses   MDCRenderer  to render the parsed markdown.      \u003C  template  >\n     \u003C  MDCRenderer     :body  =  \"ast.body\"     :data  =  \"ast.data\"   />\n   \u003C/  template  >\n   \n   \u003C  script     setup     lang  =  \"ts\"  >\n   import   { parseMarkdown }   from     'nuxt-mdc/runtime'\n   \n   const     props     =     defineProps  ({\n     md: {\n       type: String,\n         default  : ()   =>     '::alert  \\n  Missing markdown input  \\n  ::'\n     }\n   })\n   \n   const     ast     =     await     parseMarkdown  (props.md)\n   \u003C/  script  >   \u003CMDCSlot>  This component is replacement form Vue's   \u003Cslot/>  component which specifically designed for MDC. Using this component you can render a compoennt's children while removing one or multiple wrapping elements. In the below example, Alert component receive a text and it's default slot(children). But if the component render this slot using normal   \u003Cslot/>  it will render a   \u003Cp>  element around the text.      ::  alert\n   This is as Alert\n   ::      \u003C  template  >\n     \u003C  div     class  =  \"alert\"  >\n         \u003C!-- Slot will render \u003Cp> tag around the text -->\n       \u003C  slot     /  >\n     \u003C/  div  >\n   \u003C/  template  >  It is default behaviour of markdown that wraps every text inside a paragraph. MDC didn't come to break markdown behavious, instead the goal of MDC is to make markdown powerfull. In this example and all similar situations, you can use   \u003CMDCSlot />  to remove unwanted wrappers.      \u003C  template  >\n     \u003C  div     class  =  \"alert\"  >\n         \u003C!-- MDCSlot will only render the actual text wihtout the wrapping \u003Cp> -->\n       \u003C  MDCSlot     unwrap  =  \"p\"   />\n     \u003C/  div  >\n   \u003C/  template  >   \u003CMDC>  Using   \u003CMDC>  you can parse and render markdown contents right inside your components/pages. This component takes raw markdown, parse it using   parseMarkdown  function and then render it with   \u003CMDCRenderer> .      \u003C  template  >\n     \u003C  MDC     :value  =  \"md\"      tag  =  \"article\"   />\n   \u003C/  template  >\n   \n   \u003C  script     setup     lang  =  \"ts\"  >\n   const     md     =     `\n   ::alert\n   Hello MDC\n   ::\n   `\n   \u003C/  script  >  Configurations  You can configure the module by providing the   mdc  property in your   nuxt.config.js ; here are the default options:      import   { defineNuxtConfig }   from     'nuxt'\n   \n   export     default     defineNuxtConfig  ({\n     modules: [  'nuxt-mdc'  ],\n     mdc: {\n       remarkPlugins: {\n         plugins: {\n             // Register/Configure remark plugin to extend parser\n         }\n       },\n       rehypePlugins: {\n         options: {\n             // Configure rehype options to extend parser\n         },\n         plugins: {\n             // Register/Configure rehype plugin to extend parser\n         }\n       },\n       highlight:   false  ,   // Conntrol syntax highlighting\n       components: {\n         prose:   false  ,   // Add predefined map to render Prose Components instead of html tags, like p, ul, code\n         map: {\n             // This map will be used in `\u003CMDCRenderer>` to control rendered components\n         }\n       }\n     }\n   })  Checkout    ModuleOptions  types↗︎ .  Contributing  You can contribute to this module online with CodeSandBox:     Or locally:   Clone this repository  Install dependencies using   pnpm install  Start development server using   pnpm dev  License   MIT License  Copyright (c) Nuxt Team  .dark .ct-970614{color:#B392F0;}\n.ct-970614{color:#6F42C1;}\n.dark .ct-948368{color:#E1E4E8;}\n.ct-948368{color:#24292E;}\n.dark .ct-497092{color:#9ECBFF;}\n.ct-497092{color:#032F62;}\n.dark .ct-484930{color:#79B8FF;}\n.ct-484930{color:#005CC5;}\n.dark .ct-135336{color:#F97583;}\n.ct-135336{color:#D73A49;}\n.dark .ct-680237{color:#85E89D;}\n.ct-680237{color:#22863A;}\n.dark .ct-749307{color:#FDAEB7;font-style:italic;}\n.ct-749307{color:#B31D28;font-style:italic;}\n.ct-086898{color:#6A737D;}"]